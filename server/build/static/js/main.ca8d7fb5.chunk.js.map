{"version":3,"sources":["components/GameMaster/GameMaster.js","components/GamePlayer/GamePlayer.js","components/JoinGame/JoinGame.js","components/Messages/Messages.js","components/GameQuestion/GameQuestion.js","components/EndGame/EndGame.js","components/Leaderboard/Leaderboard.js","components/Navigation/Navigation.js","App.js","serviceWorker.js","index.js","trivia.png"],"names":["socket","JoinGame","useState","roomName","setRoomName","joinRoomName","setJoinRoomName","masterName","setMasterName","playerName","setPlayerName","Container","Row","className","Col","Form","Control","placeholder","type","onChange","event","target","value","onClick","preventDefault","to","Button","variant","Messages","messages","map","message","index","key","text","GameMaster","location","res","serverResMsg","setServerResMsg","setMessage","setMessages","questions","setQuestions","correctAnswer","setCorrectAnswer","round","setRound","error","setError","errorMsg","setErrorMsg","playersInRoom","setPlayersInRoom","useEffect","queryString","parse","search","io","connect","emit","console","log","on","allPlayersInRoom","disconnect","fetch","then","response","json","results","sendQuestion","questionObj","gameQuestion","question","incorrectOptions","incorrect_answers","correctOption","correct_answer","gameOptionsArray","randomNumber","Math","random","position","floor","splice","prevRound","gameRound","playerChoice","decodeURIComponent","href","size","length","playerInfo","username","GameQuestion","currentQuestion","currentOptions","currentRound","clickStatus","onClickChange","setPlayerChoice","setClickActivated","clickOption","choice","innerText","option","EndGame","players","player","history","useHistory","Table","striped","bordered","hover","score","onSubmit","e","method","body","JSON","stringify","headers","status","push","disabled","readOnly","defaultValue","GamePlayer","gameStart","setGameStart","setCurrentQuestion","setCurrentOptions","setCurrentRound","clickActivated","setPlayers","gameEnd","setGameEnd","setPlayer","client","val","Leaderboard","leaderboard","setLeaderboard","scores","Navigation","src","Logo","alt","App","path","exact","component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.ca8d7fb5.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport queryString from 'query-string';\nimport { Button, Container } from 'react-bootstrap';\nimport io from 'socket.io-client';\nimport Messages from '../Messages/Messages';\nimport './GameMaster.css';\n\nlet socket; // let can be declared without a value, const can not\n\nconst GameMaster = ({ location }) => {\n    const server = 'localhost:5000';\n    const [roomName, setRoomName] = useState('');\n    const [masterName, setMasterName] = useState('');\n    const [serverResMsg, setServerResMsg] = useState({res: 'When at least 2 players are in the room, click Init Game'});\n    const [message, setMessage] = useState('');\n    const [messages, setMessages] = useState([]);\n\n    const [questions, setQuestions] = useState([]);\n    const [correctAnswer, setCorrectAnswer] = useState('');\n    const [round, setRound] = useState(0);\n\n    const [error, setError] = useState(false);\n    const [errorMsg, setErrorMsg] = useState('');\n    \n    const [playersInRoom, setPlayersInRoom] = useState([]);\n\n    useEffect(() => {\n        const { roomName, masterName } = queryString.parse(location.search);\n        socket = io.connect(server);\n        setRoomName(roomName);\n        setMasterName(masterName);\n        \n        socket.emit('createRoom', { roomName, masterName }, (error) => {\n            if (error) {\n                setError(true);\n                setErrorMsg(error);\n                console.log(error);\n            };\n        });\n\n        socket.on('playerData', (allPlayersInRoom) => {\n            setPlayersInRoom(allPlayersInRoom);\n        });\n\n        return () => {\n            socket.emit('disconnect');\n            socket.disconnect();\n        };\n    }, [server, location.search]);\n\n    useEffect(() => {\n        socket.on('message', (text) => {\n            setMessage(text);\n        });\n\n        socket.on('message', (message) => {\n            setMessages([...messages, message ]);\n        });\n    }, [messages]);\n\n    const InitGame = () => {\n        socket.emit('ready', (res) => {\n            setServerResMsg(res);\n        });\n    };\n\n    useEffect(() => {\n        socket.on('initGame', () => {\n            setRound(0);\n            const response = fetch(`https://opentdb.com/api.php?amount=4&type=multiple&encode=url3986`)\n                .then(response => response.json())\n                .then(res => {\n                    setQuestions(res.results);\n                    sendQuestion(res.results);\n            });\n        });\n    }, []);\n\n    const sendQuestion = (questionObj) => {\n        const gameQuestion = questionObj[round].question;\n        const incorrectOptions = questionObj[round].incorrect_answers;\n        const correctOption = questionObj[round].correct_answer;\n        \n        const gameOptionsArray = [...incorrectOptions];\n        const randomNumber = Math.random() * 3;\n        const position = Math.floor(randomNumber) + 1;\n        gameOptionsArray.splice(position -1, 0, correctOption); // startpos: 0, delete 0, add\n        setCorrectAnswer(correctOption);\n\n        setRound(prevRound => {return prevRound + 1}); // setRound for next render, prevRound: holds the round number\n\n        const gameRound = round + 1;\n        socket.emit('showQuestion', { gameQuestion, gameOptionsArray, gameRound });\n    };\n\n    const NextQuestion = () => {\n        if (round !== questions.length) {\n            sendQuestion(questions);\n        } else {\n            socket.emit('endGame');\n            setServerResMsg({ res: 'Game has ended! If you want to play again, click Init Game' });\n        };\n    };\n    \n    useEffect(() => {\n        socket.on('playerChoice', (playerName, playerChoice, gameRound) => {\n            if (gameRound === round) {\n                if (playerChoice === decodeURIComponent(correctAnswer)) {\n                    console.log(playerName, 'has answered CORRECTLY:', playerChoice);\n                    socket.emit('updateScore', playerName);\n                };\n                socket.emit('correctAnswer', correctAnswer, playerName);\n            };\n            setServerResMsg({ res: 'When all players has answered, click Next question' });\n        });\n    }, [round]);\n\n    return (\n        <Container>\n            <div className=\"wrapper\">\n                {error === true ? (\n                    <div className=\"errorMsg\">\n                        <p>{errorMsg.error}</p>\n                        <a href=\"/\">Go back</a>\n                    </div>\n                ) : (\n                    <div>\n                        <h2>Hello, Game Master {masterName}!</h2>\n                        <div className=\"serverRes\">\n                            <strong>{serverResMsg.res}</strong>\n                        </div>\n                        <div className=\"button-container\">                            \n                            <Button variant=\"primary\" size=\"md\" onClick={InitGame}>Init Game</Button>\n                            <Button variant=\"primary\" size=\"md\" onClick={NextQuestion}>Next question</Button>\n                        </div>\n                        <div className=\"players-container\">\n                            <h3>Players in room</h3>\n                            <hr/>\n                            {playersInRoom.map((playerInfo, index) =>\n                                <p className=\"p-players\" key={index}>\n                                    Playername: {playerInfo.username}\n                                </p>\n                            )}\n                        </div>\n                        <div className=\"messages-container\">\n                            <h3>Activity</h3>\n                            <hr/>\n                            <Messages messages={messages}/>\n                        </div>\n                        <a href=\"/\">Leave room</a>\n                    </div>\n                )}\n            </div>\n        </Container>\n    );\n};\n\nexport default GameMaster;","import React, { useState, useEffect } from 'react';\nimport queryString from 'query-string';\nimport io from 'socket.io-client';\nimport Messages from '../Messages/Messages';\nimport GameQuestion from '../GameQuestion/GameQuestion';\nimport EndGame from '../EndGame/EndGame';\nimport { Container } from 'react-bootstrap';\n\nlet socket;\n\nconst GamePlayer = ({ location }) => {\n    const server = 'localhost:5000';\n    const [joinRoomName, setJoinRoomName] = useState('');\n    const [playerName, setPlayerName] = useState('');\n\n    const [error, setError] = useState(false);\n    const [errorMsg, setErrorMsg] = useState('');\n    \n    const [message, setMessage] = useState('');\n    const [messages, setMessages] = useState([]);\n    const [playersInRoom, setPlayersInRoom] = useState([]);\n\n    const [gameStart, setGameStart] = useState(false);\n    const [currentQuestion, setCurrentQuestion] = useState('');\n    const [currentOptions, setCurrentOptions] = useState([]);\n    const [currentRound, setCurrentRound] = useState(0);\n    const [correctAnswer, setCorrectAnswer] = useState('');\n    const [clickActivated, setClickActivated] = useState(true);\n\n    // game end\n    const [players, setPlayers] = useState([]); // to get final score\n    const [gameEnd, setGameEnd] = useState(false); \n    const [player, setPlayer] = useState(''); // to get each client final score\n\n    useEffect(() => {\n        const { joinRoomName, playerName } = queryString.parse(location.search);\n        socket = io.connect(server);\n        setJoinRoomName(joinRoomName);\n        setPlayerName(playerName);\n    \n        socket.emit('joinRoom', { joinRoomName, playerName }, (error) => {\n            if (error) {\n                setError(true);\n                setErrorMsg(error);\n                console.log(error);\n            };\n        });\n        \n        socket.on('playerData', (allPlayersInRoom) => {\n            setPlayersInRoom(allPlayersInRoom); // is empty the first time, but it is set the next time\n        });\n\n        return () => {\n            socket.emit('disconnect');\n            socket.disconnect();\n        };\n    }, [server]);\n\n    useEffect(() => {\n        socket.on('message', (text) => {\n            setMessage(text);\n        });\n        socket.on('message', (message) => {\n            setMessages([...messages, message ]);\n        });\n    }, [messages]);\n\n    useEffect(() => {\n        socket.on('currentRound', (gameQuestion, gameOptionsArray, gameRound) => {\n            // console.log(gameQuestion, gameOptionsArray, gameRound);\n            setCurrentQuestion(gameQuestion);\n            setCurrentOptions(gameOptionsArray);\n            setCurrentRound(gameRound);\n            setCorrectAnswer('');\n            setGameStart(true);\n            setGameEnd(false);\n            setClickActivated(true);\n        });\n    },[]);\n\n    // set value to false from click function in GameQuestion (onClickChange)\n    const handleClickChange = (val) => {\n        setClickActivated(val);\n    };\n\n    useEffect(() => {\n        socket.on('correctAnswer', (correctAnswer) => {\n            setCorrectAnswer(correctAnswer);\n        });\n    }, []);\n\n    useEffect(() => {\n        socket.on('scores', (players) => {\n            setPlayers(players);\n            setGameEnd(true);\n        });\n        \n        socket.on('finalPlayerInfo', (client) => {\n            setPlayer(client);\n        });\n    }, []);\n\n    return (\n        <Container>\n            <div className=\"wrapper\">\n                {error === true ? (\n                    <div className=\"errorMsg\">\n                        <p>{errorMsg.error}</p>\n                        <a href=\"/\">Go back</a>\n                    </div>\n                ) : (\n                    <div>\n                    { gameStart === false ? (\n                        <div>\n                            <h2>Hello, Game player {playerName}!</h2>\n                            <p><strong>Waiting for game master to start the game...</strong></p>\n                            <div className=\"players-container\">\n                                <h3>Players in room</h3>\n                                <hr/>\n                                {playersInRoom.map((playerInfo, index) => \n                                    <p className=\"p-players\" key={index}>\n                                        Playername: {playerInfo.username}\n                                    </p>\n                                )}\n                            </div>\n                            <div className=\"messages-container\">\n                                <h3>Activity</h3>\n                                <hr/>\n                                <Messages messages={messages} />\n                            </div>\n                            <a href=\"/\">Leave room</a>\n                        </div>\n                    ) : (\n                        <div>\n                            { gameEnd === false ? (\n                                <GameQuestion\n                                    currentQuestion={currentQuestion} \n                                    currentOptions={currentOptions} \n                                    currentRound={currentRound} \n                                    playerName={playerName} \n                                    socket={socket} \n                                    clickStatus={clickActivated} \n                                    onClickChange={handleClickChange}\n                                    correctAnswer={correctAnswer}\n                                />\n                            ) : (\n                                <EndGame players={players} player={player} />\n                                )\n                            }\n                        </div>\n                        )\n                    }\n                    </div>\n                )\n                }\n            </div>\n        </Container>\n    );\n};\n\nexport default GamePlayer;","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Form, Container, Row, Col, Button } from 'react-bootstrap';\nimport './JoinGame.css';\n\nconst JoinGame = () => {\n    const [roomName, setRoomName] = useState('');\n    const [joinRoomName, setJoinRoomName] = useState('');\n    const [masterName, setMasterName] = useState('');\n    const [playerName, setPlayerName] = useState('');\n\n    return (\n        <Container>\n            <Row className=\"justify-content-md-center\">\n                <Col>\n                    <h1>Create Game</h1>\n                    <Form>\n                        <Form.Control placeholder=\"Room name\" type=\"text\" onChange={(event) => setRoomName(event.target.value)}/>\n                        <Form.Control placeholder=\"Master name\" type=\"text\" onChange={(event) => setMasterName(event.target.value)}/>\n                        <Link onClick={event => (!roomName) ? event.preventDefault() : null} to={`/gamemaster?roomName=${roomName}&masterName=${masterName}`}>\n                            <Button variant=\"primary\" type=\"submit\">Create game</Button>\n                        </Link>\n                    </Form>\n                </Col>\n            </Row>\n\n            <Row className=\"justify-content-md-center\">\n                <Col>\n                    <h1>Join Game</h1>\n                    <Form>\n                        <Form.Control className=\"joinInput\" placeholder=\"Room name\" type=\"text\" onChange={(event) => setJoinRoomName(event.target.value)}/>\n                        <Form.Control placeholder=\"Player name\" type=\"text\" onChange={(event) => setPlayerName(event.target.value)}/>\n                        <Link onClick={event => (!joinRoomName) ? event.preventDefault() : null} to={`/gameplayer?joinRoomName=${joinRoomName}&playerName=${playerName}`}>\n                            <Button variant=\"primary\" type=\"submit\">Join game</Button>\n                        </Link>\n                    </Form>\n                </Col>\n            </Row>\n        </Container>\n    );\n};\n\nexport default JoinGame;","import React from 'react';\nimport './Messages.css';\n\nconst Messages = ({ messages }) => (\n  <div>\n    {messages.map((message, index) => \n        <p className=\"message\" key={index}>{message.text}</p>\n      )\n    }\n  </div>\n);\n\nexport default Messages;","import React, { useState } from 'react';\nimport './GameQuestion.css';\n\nconst GameQuestion = ({ currentQuestion, currentOptions, currentRound, playerName, socket, clickStatus, onClickChange, correctAnswer }) => {\n    const [playerChoice, setPlayerChoice] = useState('');\n    const [clickActivated, setClickActivated] = useState(clickStatus); // true by default\n    \n    const clickOption = (event) => {\n        const choice = event.target.innerText;\n        const gameRound = currentRound;\n        socket.emit('playerChoice', { playerName, choice, gameRound }, () => {\n            console.log('player name', playerName, 'choice', playerChoice);\n        });\n        setPlayerChoice(choice);\n\n        setClickActivated(false);\n        onClickChange(false); // handleClickChange in GamePlayer\n    };\n\n    return (\n        <div>\n            <div className=\"round-container\">\n                <h2>Question {currentRound}</h2>\n            </div>\n            { clickStatus === true ? (\n                <div className=\"container\">\n                    <div className=\"question-container\">\n                        <h2>{decodeURIComponent(currentQuestion.question)}</h2>\n                    </div>\n                    <div className=\"options-container\">\n                        { currentOptions.map((option, index) =>\n                            <div className=\"option\" key={index} onClick={clickOption}>\n                                {decodeURIComponent(option)}\n                            </div>\n                            )\n                        }\n                    </div>\n                </div>\n            ) : (\n                <div>\n                    <h3 className=\"h3-chosen-option\">You chose: {playerChoice}</h3>\n                    <p className=\"correct-answer\">Correct answer is: {decodeURIComponent(correctAnswer)}</p>\n                </div>\n                )\n            }\n        </div>\n    );\n};\n\nexport default GameQuestion;","import React from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport { Form, Container, Button, Table } from 'react-bootstrap';\nimport './EndGame.css';\n\nconst EndGame = ({ players, player }) => {\n    let history = useHistory();\n\n    const handleSubmit = e => {\n        e.preventDefault();\n\n        fetch('http://localhost:5000/scores/save', {\n            method: 'POST',\n            body: JSON.stringify({\n                username: player.username, \n                score: player.score\n            }),\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'applicaton/json'\n            }\n        }).then((response) => {\n            if(response.status === 200) {\n                console.log('Score has been saved');\n                history.push('/leaderboard');\n            };\n        });\n    };\n\n    return(\n        <Container>\n            <div>\n                <h2>The game has ended!</h2>\n                <div className=\"score-container\">\n                <h3>Game scores</h3>\n                    <Table striped bordered hover>\n                        <thead>\n                            <tr>\n                                <th>Player name</th>\n                                <th>Score</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {players.map((player, index) =>\n                                <tr key={index}>\n                                    <td>{player.username}</td>\n                                    <td>{player.score}</td>\n                                </tr>\n                            )}\n                        </tbody>\n                    </Table>\n                </div>\n\n                <div className=\"save-score-container\">\n                    <h3>Save score to leaderboard</h3>\n                    <p>If you want to play again in the same room, don't save your score!</p>\n                    <Form onSubmit={handleSubmit} method=\"POST\">\n                        <input disabled={true} readOnly defaultValue={player.username} className=\"form-control\"/>\n                        <input disabled={true} readOnly defaultValue={player.score} className=\"form-control\"/>\n                        <Button variant=\"primary\" type=\"submit\">Save score</Button>\n                    </Form>\n                </div>\n                <a href=\"/\">Leave room</a>\n            </div>\n        </Container>\n    );\n};\n\nexport default EndGame;","import React, { useState, useEffect} from 'react';\nimport { Container, Table } from 'react-bootstrap';\n\nconst Leaderboard = () => {\n    const [leaderboard, setLeaderboard] = useState([]);\n\n    useEffect(() => {\n        fetch('http://localhost:5000/scores/' , {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'applicaton/json'\n            }\n        })\n        .then(response => response.json())\n        .then( (scores) => {\n            setLeaderboard(scores);\n        });\n    }, []);\n    \n    return (\n        <Container>\n            <div className=\"wrapper\">\n                <h1>Leaderboard</h1>\n                <h3>Top 20</h3>\n                <Table striped bordered hover>\n                    <thead>\n                        <tr>\n                            <th>Player name</th>\n                            <th>Score</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {leaderboard.map((score, index) => \n                            <tr className=\"leaderboard-container\" key={index}>\n                                <td>{score.username}</td>\n                                <td>{score.score}</td>\n                            </tr>\n                        )}\n                    </tbody>\n                </Table>\n                <a href=\"/\">Join a new game</a>\n            </div>\n        </Container>\n    );\n};\n\nexport default Leaderboard;","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport './Navigation.css';\nimport Logo from '../../trivia.png';\n\nexport default function Navigation() {\n    return (\n        <header className=\"navBar-header\">\n            <div className=\"navBar-items\">\n                <NavLink to='/'><img className='logo' src={Logo} alt='logo'/></NavLink>\n            </div>\n        </header>\n    );\n};","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport JoinGame from './components/JoinGame/JoinGame';\nimport GameMaster from './components/GameMaster/GameMaster';\nimport GamePlayer from './components/GamePlayer/GamePlayer';\nimport Leaderboard from './components/Leaderboard/Leaderboard';\nimport Navigation from './components/Navigation/Navigation';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n      <Navigation />\n      <main>\n        <Switch>\n          <Route path=\"/\" exact component={JoinGame} />\n          <Route path=\"/gamemaster\" component={GameMaster} />\n          <Route path=\"/gameplayer\" component={GamePlayer} />\n          <Route path=\"/leaderboard\" component={Leaderboard} />\n        </Switch>\n      </main>\n      </BrowserRouter>\n    </div>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/trivia.8c9210ab.png\";"],"sourceRoot":""}